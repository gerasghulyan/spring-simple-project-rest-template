buildscript {
    ext {
        platformGroup = 'com.vntana.core'
        platformVersion = '0.4.0'
        kotlinVersion = '1.3.61'
        vavrVersion = '0.10.2'
        easymockVersion = '4.0.2'
        apacheCommonsValidatorVersion = '1.4.1'
        testContainersVersion = '1.11.3'
        orikaSpringBootVersion = "1.8.0"
        springFoxSwaggerVersion = '2.9.2'
        sflNotifierVersion = '1.9.0-SNAPSHOT'
        commonsApiModelsVersion = '0.4.0'
        vntanaCacheVersion = '0.4.0'
        vntanaPaymentVersion = '0.4.0'
        vntanaCommonsVersion = '0.4.0'
    }

    repositories {
        mavenCentral()
        jcenter()
        maven {
            url 'https://nexus.vntana.com/repository/maven-public'
            credentials {
                username System.env.SONATYPE_USERNAME
                password System.env.SONATYPE_PASSWORD
            }
        }
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        maven {
            url "http://oss.sonatype.org/content/repositories/snapshots"
        }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
    }
}

plugins {
    id 'org.springframework.boot' version '2.1.8.RELEASE' apply false
    id "jacoco"
    id 'io.spring.dependency-management' version '1.0.8.RELEASE'
    id "org.jetbrains.kotlin.plugin.spring" version "1.3.50"
    id "org.ajoberstar.grgit" version "3.0.0"
    id 'com.bmuschko.docker-remote-api' version "4.2.0"
    id 'com.palantir.git-version' version '0.11.0'
    id "org.sonarqube" version "2.7.1"
}

def environmentPlatformVersion() {
    switch (grgit.getBranch().current().name) {
        case "develop":
            return "$platformVersion-SNAPSHOT"
        case "release":
            return "$platformVersion-release-SNAPSHOT"
        case "master":
            return platformVersion
        default:
            return "$platformVersion-SNAPSHOT"
    }
}

def versionPostfix() {
    switch (grgit.getBranch().current().name) {
        case "develop":
            return "-SNAPSHOT"
        case "release":
            return "-release-SNAPSHOT"
        case "master":
            return ""
        default:
            return "-SNAPSHOT"
    }
}

task printEnvVersion() {
    doLast {
        println version
    }
}

task tagRelease() {
    description = 'Tags the current head with the project\'s version.'
    doLast {
        grgit.tag.add {
            name = version
            message = "Release of ${version}"
        }
        grgit.push()
    }
}

allprojects {
    apply plugin: "java"
    apply plugin: "idea"
    apply plugin: "org.jetbrains.kotlin.jvm"
    apply plugin: "io.spring.dependency-management"

    group = platformGroup
    version = environmentPlatformVersion()
    sourceCompatibility = '1.8'

    task makePretty(type: Delete) {
        delete 'out'
    }

    compileKotlin {
        kotlinOptions.jvmTarget = "1.8"
    }

    compileTestKotlin {
        kotlinOptions.jvmTarget = "1.8"
    }

    repositories {
        mavenCentral()
        jcenter()
        maven {
            url 'https://nexus.vntana.com/repository/maven-public'
            credentials {
                username System.env.SONATYPE_USERNAME
                password System.env.SONATYPE_PASSWORD
            }
        }
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        maven {
            url "http://oss.sonatype.org/content/repositories/snapshots"
        }
    }

    dependencies {
        implementation 'org.apache.commons:commons-lang3'
        implementation "org.jetbrains.kotlin:kotlin-stdlib"
        implementation "io.vavr:vavr"
        testImplementation "org.easymock:easymock"
        testImplementation "junit:junit"
        testImplementation "org.assertj:assertj-core"
    }

    dependencyManagement {
        imports {
            mavenBom("org.springframework.boot:spring-boot-dependencies:2.1.8.RELEASE") {
                bomProperty("kotlin.version", kotlinVersion)
            }
            mavenBom 'org.springframework.cloud:spring-cloud-dependencies:Greenwich.RELEASE'
        }
        dependencies {
            dependency("org.easymock:easymock:$easymockVersion")
            dependency("org.easymock:easymock:$easymockVersion")
            dependency("io.vavr:vavr:$vavrVersion")
            dependency("commons-validator:commons-validator:$apacheCommonsValidatorVersion")
            dependency("org.testcontainers:postgresql:$testContainersVersion")
            dependency("com.sflpro.notifier:api-client-library:$sflNotifierVersion")
            dependency("net.rakugakibox.spring.boot:orika-spring-boot-starter:${orikaSpringBootVersion}")
            dependency("io.springfox:springfox-swagger2:$springFoxSwaggerVersion")
            dependency("io.springfox:springfox-swagger-ui:$springFoxSwaggerVersion")
            dependency("com.vntana.commons:api-models:$commonsApiModelsVersion${versionPostfix()}")
            dependency("com.vntana.commons:persistence-domain:$commonsApiModelsVersion${versionPostfix()}")
            dependency("com.vntana.commons:cache:$commonsApiModelsVersion${versionPostfix()}")
            dependency("com.vntana.commons:rest-test-helper:$commonsApiModelsVersion${versionPostfix()}")
            dependency("com.vntana.commons:web-utils:$vntanaCommonsVersion${versionPostfix()}")
            dependency("com.vntana.cache:vntana-cache:$vntanaCacheVersion${versionPostfix()}")
            dependency("com.vntana.payment:rest-client-payment:$vntanaPaymentVersion${versionPostfix()}")
        }
    }


    jacoco {
        toolVersion = '0.8.5'
    }

}

project(":domain") {

    sonarqube.skipProject = true

    dependencies {
        api 'com.vntana.commons:persistence-domain'
    }
}

project(":persistence:persistence-core") {

    sonarqube.skipProject = true

    dependencies {
        implementation project(":domain")
    }
}

project(":persistence:persistence-impl") {

    sonarqube.skipProject = true

    dependencies {
        implementation project(":domain")
        implementation project(":persistence:persistence-core")
    }
}

project(":commons:persistence-utils") {

    sonarqube.skipProject = true

    group = "${platformGroup}.persistence"

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    }

}

project(":migration:migration-library") {

    sonarqube.skipProject = true

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
        implementation 'org.flywaydb:flyway-core'
        runtimeOnly 'org.postgresql:postgresql'
    }

}

project(":migration:migration-executable") {

    sonarqube.skipProject = true

    group = "${platformGroup}.migration"

    apply plugin: "org.springframework.boot"

    bootJar {
        mainClassName = "${group}.boot.MigrationBootApplication"
        manifest {
            attributes(
                    "Implementation-Version": environmentPlatformVersion()
            )
        }
    }
    dependencies {
        implementation project(":migration:migration-library")
        implementation "org.springframework.boot:spring-boot-starter"
    }
}

project(":notification") {

    sonarqube.skipProject = true

    dependencies {
        implementation "com.sflpro.notifier:api-client-library"
        implementation 'org.springframework:spring-context'
        implementation 'org.glassfish.jersey.inject:jersey-hk2'
        implementation 'com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider'
        testImplementation "org.easymock:easymock"
    }
}

project(":helper:test-helper") {

    sonarqube.skipProject = true

    dependencies {
        implementation project(":domain")
        implementation project(":service:service-core")
        implementation project(":api:rest:rest-model")
        implementation "org.assertj:assertj-core"
        implementation 'org.springframework:spring-context'
    }
}

project(":helper:rest-test-helper") {

    apply plugin: 'maven'
    apply plugin: "kotlin-spring"
    
    sonarqube.skipProject = true

    archivesBaseName = 'rest-test-helper'

    uploadArchives {
        repositories {
            mavenDeployer {

                repository(url: "https://nexus.vntana.com/repository/maven-releases/") {
                    authentication(userName: System.env.SONATYPE_USERNAME, password: System.env.SONATYPE_PASSWORD)
                }

                snapshotRepository(url: "https://nexus.vntana.com/repository/maven-snapshots/") {
                    authentication(userName: System.env.SONATYPE_USERNAME, password: System.env.SONATYPE_PASSWORD)
                }

                pom.version = environmentPlatformVersion()
                pom.artifactId = "rest-test-helper"
                pom.groupId = platformGroup
            }
        }
    }
    
    dependencies {
        compile "com.vntana.commons:rest-test-helper"
        implementation project(":api:rest:rest-model")
        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation 'org.springframework:spring-context'
        implementation 'org.jetbrains.kotlin:kotlin-stdlib'
        api "org.assertj:assertj-core"
    }
}

project(":helper:rest-resource-test-helper") {

    sonarqube.skipProject = true

    group = "${platformGroup}.helper"
    apply plugin: "kotlin-spring"

    dependencies {
        api project(":helper:rest-test-helper")
        implementation project(":api:rest:rest-client")
        implementation project(":api:rest:rest-model")
        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation 'org.springframework:spring-context'
        implementation 'org.jetbrains.kotlin:kotlin-stdlib'
    }
}

project(":service:service-core") {

    sonarqube.skipProject = true

    group = "${platformGroup}.service"

    dependencies {
        implementation project(":domain")
    }
}

project(":service:service-impl") {

    apply plugin: "kotlin-spring"
    apply plugin: "jacoco"

    group = "${platformGroup}.service"

    dependencies {
        implementation project(":domain")
        implementation project(":persistence:persistence-core")
        implementation project(":persistence:persistence-impl")
        implementation project(":commons:persistence-utils")
        implementation project(":service:service-core")
        implementation "org.springframework.security:spring-security-crypto"
        implementation project(":listener:listener-core")
        testImplementation project(":helper::test-helper")
        testImplementation "org.springframework.boot:spring-boot-starter-test"
        testImplementation "org.easymock:easymock"
    }
}

project(":service:service-integration-test") {

    group = "${platformGroup}.service"
    apply plugin: "jacoco"
    apply plugin: "kotlin-spring"
    sonarqube.skipProject = true

    dependencies {
        testImplementation project(":helper:test-helper")
        testImplementation project(":domain")
        testImplementation project(":service:service-core")
        implementation project(":migration:migration-library")
        runtimeOnly project(":service:service-impl")
        testImplementation "org.springframework.boot:spring-boot-starter-test"
        testImplementation "org.springframework.security:spring-security-crypto"
        testImplementation "org.testcontainers:postgresql"
        testImplementation "org.postgresql:postgresql"
    }
}

project(":api:rest:rest-model") {

    apply plugin: 'maven'
    sonarqube.skipProject = true

    archivesBaseName = 'rest-model-core'

    uploadArchives {
        repositories {
            mavenDeployer {

                repository(url: "https://nexus.vntana.com/repository/maven-releases/") {
                    authentication(userName: System.env.SONATYPE_USERNAME, password: System.env.SONATYPE_PASSWORD)
                }

                snapshotRepository(url: "https://nexus.vntana.com/repository/maven-snapshots/") {
                    authentication(userName: System.env.SONATYPE_USERNAME, password: System.env.SONATYPE_PASSWORD)
                }

                pom.version = environmentPlatformVersion()
                pom.artifactId = "rest-model-core"
                pom.groupId = platformGroup
            }
        }
    }

    dependencies {
        api "com.fasterxml.jackson.core:jackson-annotations"
        compile "com.vntana.commons:api-models"
        implementation "commons-validator:commons-validator"
    }
}

project(":api:rest:rest-client") {

    apply plugin: 'maven'
    sonarqube.skipProject = true

    archivesBaseName = 'rest-client-core'

    uploadArchives {
        repositories {
            mavenDeployer {

                repository(url: "https://nexus.vntana.com/repository/maven-releases/") {
                    authentication(userName: System.env.SONATYPE_USERNAME, password: System.env.SONATYPE_PASSWORD)
                }

                snapshotRepository(url: "https://nexus.vntana.com/repository/maven-snapshots/") {
                    authentication(userName: System.env.SONATYPE_USERNAME, password: System.env.SONATYPE_PASSWORD)
                }

                pom.version = environmentPlatformVersion()
                pom.artifactId = "rest-client-core"
                pom.groupId = platformGroup
            }
        }
    }

    dependencies {
        compile project(":api:rest:rest-model")
        compile "org.springframework.cloud:spring-cloud-starter-openfeign"
    }
}

project(":api:rest:rest-facade") {

    apply plugin: "jacoco"
    group = "${platformGroup}.rest.facade"

    dependencies {
        implementation project(":api:rest:rest-model")
        implementation project(":service:service-core")
        implementation project(":notification")
        implementation project(":commons:persistence-utils")
        runtimeOnly project(":service:service-impl")
        implementation project(":domain")
        implementation "net.rakugakibox.spring.boot:orika-spring-boot-starter"
        implementation "org.springframework:spring-context"
        implementation "com.sflpro.notifier:api-client-library"
        testImplementation project(":helper:test-helper")
        testImplementation project(":helper:rest-test-helper")
        testImplementation "org.easymock:easymock"
    }
}

project(":api:rest:rest-resource") {

    group = "${platformGroup}.rest.resource"
    sonarqube.skipProject = true

    dependencies {
        implementation "com.vntana.commons:web-utils"
        api project(":api:rest:rest-facade")
        api project(":api:rest:rest-model")
        api "org.springframework.boot:spring-boot-starter-web"
        api "org.aspectj:aspectjrt"
        api "org.aspectj:aspectjweaver"
        runtimeOnly project(":listener:listener-impl")
    }
}

project(":api:rest:rest-resource-executable") {

    group = "${platformGroup}.rest.resource"

    sonarqube.skipProject = true
    apply plugin: "org.springframework.boot"

    bootJar {
        mainClassName = "${platformGroup}.rest.resource.boot.VntanaSpringBootWebApplication"
        manifest {
            attributes(
                    "Implementation-Version": environmentPlatformVersion()
            )
        }
    }

    dependencies {
        implementation project(":api:rest:rest-resource")
        runtimeOnly project(":listener:listener-impl")
        implementation project(":migration:migration-library")
        implementation 'org.springframework.data:spring-data-jpa'
        implementation "io.springfox:springfox-swagger2"
        implementation "io.springfox:springfox-swagger-ui"
        implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'
        implementation 'com.fasterxml.jackson.module:jackson-module-parameter-names'
        implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jdk8'
        implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
        implementation "org.postgresql:postgresql"
        implementation "com.sflpro.notifier:api-client-library"
        implementation "com.vntana.cache:vntana-cache"
        implementation "com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider"
    }
}

project(":api:rest:rest-resource-integration-test") {

    apply plugin: "kotlin-spring"
    sonarqube.skipProject = true
    apply plugin: "jacoco"

    dependencies {
        implementation project(":api:rest:rest-client")
        implementation "org.springframework.boot:spring-boot-starter"
        testImplementation project(":api:rest:rest-resource")
        testImplementation project(":migration:migration-library")
        testImplementation project(":helper:rest-resource-test-helper")
        testImplementation 'com.vntana.payment:rest-client-payment'
        testImplementation "com.vntana.cache:vntana-cache"
        testImplementation "com.sflpro.notifier:api-client-library"
        testImplementation "org.springframework.boot:spring-boot-starter-test"
        testImplementation 'org.springframework.data:spring-data-jpa'
        testImplementation "org.testcontainers:postgresql"
        testImplementation "org.postgresql:postgresql"
        testImplementation 'com.fasterxml.jackson.module:jackson-module-kotlin'
        testImplementation 'com.fasterxml.jackson.module:jackson-module-parameter-names'
        testImplementation 'com.fasterxml.jackson.datatype:jackson-datatype-jdk8'
        testImplementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
    }
}

project(":listener:listener-core") {

    sonarqube.skipProject = true

    dependencies {
        api project(":domain")
        api project(":service:service-core")
    }
}

project(":listener:listener-impl") {

    apply plugin: "jacoco"

    dependencies {
        api project(":listener:listener-core")
        api "com.vntana.cache:vntana-cache"
        api 'com.vntana.payment:rest-client-payment'
        testImplementation project(":helper:test-helper")
    }
}

//region Jacoco unit tests
configure(subprojects.findAll {
    it.name == "service-impl" || it.name == "rest-facade" || it.name == "listener-impl"
}) {
    jacocoTestReport {
        reports {
            csv.enabled = false
            xml.enabled = true
            html.enabled = true
            html.destination file("${buildDir}/reports/coverage")
            println("jacoco coverage report: ${project.name}")
            println("file://${html.destination}/index.html")
        }
        afterEvaluate {
            classDirectories.from = files(classDirectories.files.collect {
                fileTree(
                        dir: it,
                        includes: [
                                'com/vntana/core/service/**',
                                'com/vntana/core/rest/facade/**',
                                'com/vntana/core/listener/**'
                        ],
                        exclude: [
                                'com/vntana/core/service/conf/**',
                                'com/vntana/core/rest/facade/conf/**'
                        ])
            })
        }
    }

    jacocoTestCoverageVerification {
        violationRules {
            rule {
                element = 'CLASS'
                includes = ['com.vntana.core.service.*.impl.*',
                            'com.vntana.core.rest.facade.*.impl.*',
                            'com.vntana.core.listener.*.*'
                ]
                excludes = [
                        '*Exception',
                ]
                limit {
                    counter = 'LINE'
                    value = 'COVEREDRATIO'
                    minimum = 0.0
                }
                failOnViolation true
            }
        }
    }

    build.dependsOn jacocoTestReport
    check.dependsOn jacocoTestCoverageVerification
}
//endregion

//region Jacoco integration tests
configure(subprojects.findAll {
    it.name == "service-integration-test" || it.name == "rest-resource-integration-test"}) {
    jacocoTestReport {

        reports {
            csv.enabled = false
            xml.enabled = true
            html.enabled = true
            html.destination file("${buildDir}/reports/coverage")
            println("jacoco coverage report: ${project.name}")
            println("file://${html.destination}/index.html")
        }
        afterEvaluate {
            if (project.name == "service-integration-test") {
                classDirectories.from = files(files(rootProject.project(":service:service-impl").buildDir).collect().collect {
                    fileTree(
                            dir: it,
                            includes: [
                                    'classes/java/main/com/vntana/core/service/**'
                            ],
                            exclude: [
                            ])
                })
                additionalSourceDirs.from("${rootProject.project(":service:service-impl").projectDir}/src/main/java")
            } else if (project.name == "rest-resource-integration-test") {
                List allFiles = files(rootProject.project(":api:rest:rest-facade").buildDir).collect()
                allFiles.addAll(files(rootProject.project(":service:service-impl").buildDir).collect())
                classDirectories.from = files(allFiles.collect {
                    fileTree(
                            dir: it,
                            includes: [
                                    'classes/java/main/com/vntana/core/rest/facade/**',
                                    'classes/java/main/com/vntana/core/service/**'
                            ],
                            exclude: [
                            ])
                })
                additionalSourceDirs.from("${rootProject.project(":service:service-impl").projectDir}/src/main/java",
                        "${rootProject.project(":api:rest:rest-facade").projectDir}/src/main/java")
            }
        }
    }

    jacocoTestCoverageVerification {
        violationRules {
            rule {
                List allFiles = files(rootProject.project(":api:rest:rest-facade").buildDir).collect()
                allFiles.addAll(files(rootProject.project(":service:service-impl").buildDir).collect())
                classDirectories.from = files(allFiles.collect {
                    fileTree(
                            dir: it,
                            includes: [
                                    'classes/java/main/com/vntana/core/rest/facade/**',
                                    'classes/java/main/com/vntana/core/service/**'
                            ],
                            exclude: [
                            ])
                })
                element = 'CLASS'
                includes = ['com.vntana.core.service.*.impl.*',
                            'com.vntana.core.rest.facade.*.impl.*',
                            'com.vntana.core.listener.*.*'
                ]
                excludes = [
                        '*Exception'
                ]
                limit {
                    counter = 'LINE'
                    value = 'COVEREDRATIO'
                    minimum = 0.0
                }
                failOnViolation false
            }
        }
    }

    build.dependsOn jacocoTestReport
    check.dependsOn jacocoTestCoverageVerification
}
//endregion

sonarqube {

    properties {
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.projectKey", "vntanaplatform2_vntana-core"
        property "sonar.organization", "vntanaplatform2"
        //property "sonar.login", "5a036bca40998e0bd8f7b145b23f9c872d949f6c"
    }
}

import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerPushImage
import com.bmuschko.gradle.docker.tasks.image.DockerRemoveImage
import com.bmuschko.gradle.docker.tasks.image.Dockerfile

configure(subprojects.findAll {
    it.name == "rest-resource-executable" || it.name == "scheduler" || it.name == "queue-consumer" || it.name == "migration-executable"
}) {

    apply plugin: 'com.bmuschko.docker-remote-api'

    def registry = project.findProperty("dockerRegistry") ?: ""
    if (registry) {
        registry += "/"
    }
    docker {
        registryCredentials {
            url = "https://$registry"
            username = System.getenv("DOCKER_REGISTRY_USERNAME")
            password = System.getenv("DOCKER_REGISTRY_PASSWORD")
        }
    }

    task createDockerfile(type: Dockerfile) {
        destFile = project.layout.buildDirectory.file('docker/Dockerfile')
        from 'openjdk:8-jre'
        label(
                [
                        'maintainer': 'vntana@sfl.am',
                ]
        )
        copyFile("${jar.archiveName}", "/")
        exposePort(8080)
        entryPoint("java", "-jar", "/${jar.archiveName}")
    }

    task buildDockerImage(type: DockerBuildImage) {
        dependsOn createDockerfile
        dependsOn build
        inputDir = createDockerfile.destFile.get().asFile.parentFile
        doFirst {
            copy {
                from jar
                into inputDir
            }
        }
        def repo = [
                "rest-resource-executable": "core",
                "migration-executable"    : "migration"
        ][project.name]
        tags.add("$registry$repo:$project.version")
        def v = versionDetails()
        if (v.gitHash) {
            tags.add("$registry$repo:${v.gitHash}")
        }
        if (v.branchName) {
            tags.add("$registry$repo:${v.branchName.replaceAll("/", "-")}")
        }
    }

    task removeDockerImage(type: DockerRemoveImage) {
        force = true
        targetImageId buildDockerImage.getImageId()
    }

    buildDockerImage.tags.get().each { tag ->
        tasks.create(name: "pushDockerTag_${tag.replaceAll('[/\\\\:<>"\\?\\*\\|]', "-")}", type: DockerPushImage) {
            dependsOn buildDockerImage
            imageName = tag
        }
    }

    task pushDockerTags {
        dependsOn tasks.withType(DockerPushImage)
    }

    if (project.hasProperty("removeImage")) {
        pushDockerTags.finalizedBy removeDockerImage
    }
}